// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Account struct {
	ID           string `json:"id"`
	Subscription *Plan  `json:"subscription"`
}

func (Account) IsEntity() {}

type Plan struct {
	ID   string   `json:"id"`
	Type PlanType `json:"type"`
}

type PlanType string

const (
	PlanTypeFree PlanType = "FREE"
	PlanTypePaid PlanType = "PAID"
)

var AllPlanType = []PlanType{
	PlanTypeFree,
	PlanTypePaid,
}

func (e PlanType) IsValid() bool {
	switch e {
	case PlanTypeFree, PlanTypePaid:
		return true
	}
	return false
}

func (e PlanType) String() string {
	return string(e)
}

func (e *PlanType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PlanType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PlanType", str)
	}
	return nil
}

func (e PlanType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
